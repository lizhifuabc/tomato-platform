# 标准的 Jenkins Docker 部署文件,利用官方镜像来启动 Jenkins 服务
# version:指定 Docker Compose版本,这里是3.8
# https://hub.docker.com/r/jenkins/jenkins
version: "3.8"
# services:服务定义部分。其下面定义了一个名为jenkins的服务
services:
  jenkins:
    #  image:指定服务使用的镜像,这里是jenkinsci/blueocean。这是一个官方的Jenkins镜像。
    image: jenkinsci/blueocean
    #  container_name:容器名称,此处设置为jenkins
    container_name: jenkins
    # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
    restart: unless-stopped
    #  hostname:主机名设置为jenkins
    hostname: jenkins
    #  privileged:赋予该容器特权模式。Jenkins需要 Docker 命令执行权限,需要特权模式
    privileged: true
    # user:指定容器内进程运行用户为root，# 使用root权限运行容器【docker中通过`-u root`命令】
    user: root
    # environment:环境变量部分
    environment:
      # 设置时区为上海时区
      TZ: "Asia/Shanghai"
    # volumes:数据卷挂载路径设置,将本机目录映射到容器目录 (下面映射可在容器中执行宿主机docker命令)
    # Jenkins 数据会保存到挂载的 /var/jenkins_home 目录,并可以使用本地的 Maven 缓存。
    volumes:
      # 把宿主机上的 /usr/local/docker-volumes/jenkins/jenkins_home
      # 目录挂载到了容器内的 /var/jenkins_home
      # 作用是保存 Jenkins 的家目录数据,实现数据的持久化。否则 Jenkins 的数据是保存在容器内会丢失。
      - /usr/local/docker-volumes/jenkins/jenkins_home:/var/jenkins_home
      # 挂载 Docker 的 socket 文件,让容器内的 Jenkins 可以通过 /var/run/docker.sock
      # 访问宿主机的 Docker 引擎。
      # 这样 Jenkins 就可以在容器内使用 Docker 命令管理宿主机上的容器。
      - /var/run/docker.sock:/var/run/docker.sock
      # 映射宿主机的 /usr/local 目录到容器内的 /home 目录
      # 容器可以直接使用宿主机上的文件
      - /usr/local:/home
      # 挂载宿主机的 maven 本地仓库目录到容器的 /root/.m2目录
      # 容器就可以复用宿主机上 cached 的 maven 依赖,加速 Maven 的构建
      - /Users/lizhifu/.m2/repository:/root/.m2
    # ports:端口映射,将 8080 和 50000 端口映射到宿主机
    ports:
      # 访问端口：本机端口:容器端口
      - "8888:8080"
      # 通信端口：本机端口:容器端口
      - "51000:50000"