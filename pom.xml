<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.tomato</groupId>
        <artifactId>tomato-bom</artifactId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>tomato-bom/pom.xml</relativePath>
    </parent>
    <artifactId>tomato-platform</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    <modules>
        <module>tomato-module</module>
        <module>tomato-framework</module>
        <module>tomato-book</module>
        <module>tomato-gateway</module>
        <module>tomato-example</module>
    </modules>
    <name>${project.artifactId}</name>
    <!-- ${basedir} 项目根目录 -->
    <!-- ${project.build.directory} 构建目录，默认target -->
    <!-- ${project.build.outputDirectory} 构建过程输出目录，默认target/classes -->
    <!-- ${project.build.finalName} 名称，默认${project.artifactId}-${revision} -->
    <!-- ${project.packaging} 打包类型，默认jar -->
    <!-- ${project.xxx} 当前pom文件的任意节点的内容 如project.artifactId -->
    <properties>
        <!-- Maven 相关配置 -->
        <java.version>17</java.version> <!-- java 版本管理 -->
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding> <!-- 用于生成 Maven 项目报告的编码 -->

        <!--  主要用于 构建插件的配置，放在这里会造成和猪POM不一致的问题，TODO      -->
        <!-- spring boot 版本管理 -->
        <spring.boot.version>3.1.3</spring.boot.version>
        <!--  docker 相关配置 -->
        <docker.plugin.version>0.32.0</docker.plugin.version>
        <docker.host>http://xxx.xxx.x.xxxx:xxxx</docker.host>
        <docker.registry>xxx.xxx.x.xxxx</docker.registry>
        <docker.namespace>xxxxxx</docker.namespace>
        <docker.username>username</docker.username>
        <docker.password>password</docker.password>
    </properties>
    <dependencyManagement>
        <dependencies>
        </dependencies>
    </dependencyManagement>

    <build>
        <!-- 构建后的最终文件名 -->
        <finalName>${project.name}</finalName>
        <resources>
            <resource>
                <!--   配置了资源文件的处理，指定了资源文件的目录             -->
                <directory>src/main/resources</directory>
                <!--  是否过滤资源文件，如果过滤，会将资源文件中的占位符替换为具体的值，如${project.version} -->
                <filtering>true</filtering>
            </resource>
        </resources>
        <!-- 子项目中通过显式的配置plugin和execution元素来使用插件。-->
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring.boot.version}</version>
                    <configuration>
                        <!-- 最终构建文件名 -->
                        <finalName>${project.build.finalName}</finalName>
                        <!-- 开启分层jar的构建 -->
                        <layers>
                            <enabled>true</enabled>
                        </layers>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <!-- 在package阶段执行repackage目标，解决jar中没有主清单属性 -->
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <!-- 是否显示编译警告信息 -->
                    <showWarnings>true</showWarnings>
                    <!-- 跳过测试 -->
                    <skip>true</skip>
                    <!-- 允许编译过程配置注解处理器的路径 TODO 需要添加lombok mapreduce-->
<!--                    <annotationProcessorPaths>-->
<!--                        &lt;!&ndash; springboot configuration processor对maven子模块不起作用 &ndash;&gt;-->
<!--                        <path>-->
<!--                            <groupId>org.springframework.boot</groupId>-->
<!--                            <artifactId>spring-boot-configuration-processor</artifactId>-->
<!--                            <version>${spring.boot.version}</version>-->
<!--                        </path>-->
<!--                        <path>-->
<!--                            <groupId>org.springframework.boot</groupId>-->
<!--                            <artifactId>spring-boot-autoconfigure-processor</artifactId>-->
<!--                            <version>${spring.boot.version}</version>-->
<!--                        </path>-->
<!--                    </annotationProcessorPaths>-->
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>${maven-resources-plugin.version}</version>
                <configuration>
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <propertiesEncoding>${project.build.sourceEncoding}</propertiesEncoding>
                    <!-- <addDefaultExcludes>: 是否添加默认的排除项。如果设置为 false，则不会排除任何文件，默认为 true。 -->
<!--                    <addDefaultExcludes>false</addDefaultExcludes>-->
                    <!-- <delimiters>: 配置文件过滤器的分隔符，用于在资源文件中识别需要替换的属性 -->
                    <!-- useDefaultDelimiters>: 是否使用默认的过滤器分隔符 ${}。如果设置为 false，则会使用上面配置的自定义分隔符。 -->
<!--                    <delimiters>-->
<!--                        <delimiter</delimiter>-->
<!--                    </delimiters>-->
<!--                    <useDefaultDelimiters>false</useDefaultDelimiters>-->
                </configuration>
            </plugin>
            <!-- spring 代码格式插件 ./mvnw spring-javaformat:apply 或 mvn spring-javaformat:apply -->
            <!-- IDEA 插件： https://repo1.maven.org/maven2/io/spring/javaformat/spring-javaformat-intellij-idea-plugin -->
            <plugin>
                <groupId>io.spring.javaformat</groupId>
                <artifactId>spring-javaformat-maven-plugin</artifactId>
                <version>${spring.checkstyle.plugin}</version>
                <executions>
                    <execution>
                        <phase>validate</phase>
                        <inherited>true</inherited>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <profile>
            <id>dev</id>
            <properties>
                <!-- 环境标识，需要与配置文件的名称相对应 -->
                <profiles.active>dev</profiles.active>
                <nacos.username>nacos</nacos.username>
                <nacos.password>nacos</nacos.password>

                <!--代码构建控制-->
                <!--跳过构建源代码包-->
                <skip.build.source.package>false</skip.build.source.package>
                <!--不copy代码包到docker构建目录-->
                <skip.copy.docker.resource>false</skip.copy.docker.resource>
                <!--不执行git commit 构建-->
                <skip.build.git.commit.info>false</skip.build.git.commit.info>
            </properties>
            <activation>
                <!--默认激活配置-->
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
    </profiles>
    <!--  maven 依赖的下载是从 repositories 中获取的 -->
    <repositories>
        <repository>
            <id>ali-repository</id> <!-- 阿里远程仓库唯一标识符 -->
            <url>https://maven.aliyun.com/repository/public/</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>tencent-repository</id> <!-- 腾讯远程仓库唯一标识符 -->
            <url>http://mirrors.cloud.tencent.com/nexus/repository/maven-public/</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>huawei-repository</id> <!-- 华为远程仓库唯一标识符 -->
            <url>https://repo.huaweicloud.com/repository/maven/</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>

        <repository>
            <!-- 远程仓库唯一标识符 -->
            <id>spring-milestones</id>
            <!--描述 -->
            <name>Spring Milestones</name>
            <!--远程仓库url -->
            <url>https://repo.spring.io/milestone</url>
            <!-- 禁止从公共仓库下载snapshot构件 -->
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>spring-snapshots</id>
            <name>Spring Snapshots</name>
            <url>https://repo.spring.io/snapshot</url>
            <!-- 禁止从公共仓库下载releases构件 -->
            <releases>
                <enabled>false</enabled>
            </releases>
        </repository>
    </repositories>
    <!-- mvn clean install site  命令能够成功处理 -->
    <pluginRepositories>
        <pluginRepository>
            <id>aliyun-repository</id>
            <url>https://maven.aliyun.com/repository/public/</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
        <pluginRepository>
            <id>tencent-repository</id>
            <url>http://mirrors.cloud.tencent.com/nexus/repository/maven-public/</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
        <pluginRepository>
            <id>huawei-repository</id>
            <url>https://repo.huaweicloud.com/repository/maven/</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
        <pluginRepository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
        <pluginRepository>
            <id>spring-snapshots</id>
            <name>Spring Snapshots</name>
            <url>https://repo.spring.io/snapshot</url>
            <releases>
                <enabled>false</enabled>
            </releases>
        </pluginRepository>
    </pluginRepositories>
</project>